--Cteating the tables--

ALTER TABLE assets
ALTER COLUMN asset_no TYPE INT 
USING asset_no::INT;




CREATE TABLE employee(
employee_id VARCHAR(50) PRIMARY KEY,
last_name CHAR(50),
first_name CHAR(50),
title VARCHAR(50),
reports_to VARCHAR(30),
levels VARCHAR(10),
birthdate TIMESTAMP,
hire_date TIMESTAMP,
address VARCHAR(120),
city VARCHAR(50),
state VARCHAR(50),
country VARCHAR(30),
postal_code VARCHAR(30),
phone VARCHAR(30),
fax VARCHAR(30),
email VARCHAR(30));

CREATE TABLE customer(
customer_id VARCHAR(30) PRIMARY KEY,
first_name CHAR(30),
last_name CHAR(30),
company VARCHAR(30),
address VARCHAR(30),
city VARCHAR(30),
state VARCHAR(30),
country VARCHAR(30),
postal_code INT8,
phone INT,
fax INT,
email VARCHAR(30),
support_rep_id VARCHAR(30));

CREATE TABLE invoice(
invoice_id VARCHAR(30) PRIMARY KEY,
customer_id VARCHAR(30),
invoice_date TIMESTAMP,
billing_address VARCHAR(120),
billing_city VARCHAR(30),
billing_state VARCHAR(30),
billing_country VARCHAR(30),
billing_postal VARCHAR(30),
total FLOAT8);

CREATE TABLE invoice_line(
invoice_line_id VARCHAR(50) PRIMARY KEY,
invoice_id VARCHAR(30),
track_id VARCHAR(30),
unit_price VARCHAR(30),
quantity VARCHAR(30));

CREATE TABLE track(
track_id VARCHAR(50) PRIMARY KEY,
name VARCHAR(30),
album_id VARCHAR(30),
media_type_id VARCHAR(30),
genre_id VARCHAR(30),
composer VARCHAR(30),
milliseconds TIMESTAMP,
bytes INT8,
unit_price INT16);

CREATE TABLE playlist(
playlist_id VARCHAR(50) PRIMARY KEY,
name  VARCHAR(30));

CREATE TABLE playlist_track(
playlist_id VARCHAR(50) PRIMARY KEY,
track_id VARCHAR(50) PRIMARY KEY);

CREATE TABLE artist(
artist_id VARCHAR(50) PRIMARY KEY,
name  VARCHAR(30)); 

CREATE TABLE album(
album_id VARCHAR(50) PRIMARY KEY,
title  VARCHAR(30),
artist_id  VARCHAR(30));

CREATE TABLE media_type(
media_type_id VARCHAR(50) PRIMARY KEY,
name VARCHAR(30));

CREATE TABLE genre(
genre_id VARCHAR(50) PRIMARY KEY,
name VARCHAR(30));

--Now import all the csv file into this data servers--


select * from album;
select * from artist;
select * from customer;
select * from employee;
select * from genre;
select * from invoice;
select * from invoice_line;
select * from media_type;
select * from playlist;
select * from playlist_track;
select * from track;

										--Question Set 1 - Easy
--1. Who is the senior most employee based on job title?
select * from employee;
select employee_id, concat(first_name,' ',last_name) Full_name, title 
from employee 
order by levels desc limit 1; 

--2. Which countries have the most Invoices?
select * from invoice;
select billing_country, count(total) total 
from invoice group by billing_country 
order by total desc;

--3. What are top 3 values of total invoice?
select * from invoice;
select total 
from invoice 
order by total desc limit 3;

--4. Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. 
--Write a query that returns one city that has the highest sum of invoice totals. 
--Return both the city name & sum of all invoice totals
select * from invoice;
select billing_city,sum(total) total 
from invoice group by billing_city 
order by total desc limit 1;

--5. Who is the best customer? The customer who has spent the most money will be declared the best customer. 
--Write a query that returns the person who has spent the most money
select * from customer;
select * from invoice;
select c.customer_id, concat(c.first_name,' ',c.last_name) Full_name, sum(i.total) total
from customer c join invoice i on c.customer_id=i.customer_id
group by c.customer_id order by total desc limit 1;



										--Question Set 2 – Moderate
--1. Write query to return the email, first name, last name, & Genre of all Rock Music listeners. 
--Return your list ordered alphabetically by email starting with A
select * from customer;
select * from genre;

select distinct email,first_name, last_name from 
customer c join invoice i on c.customer_id=i.customer_id 
join invoice_line il on i.invoice_id=il.invoice_id
where track_id in(
	select t.track_id from track t join genre g on t.genre_id = g.genre_id 
	where g.name like '%Rock%'
)
order by c.email;


--2. Let's invite the artists who have written the most rock music in our dataset. 
--Write a query that returns the Artist name and total track count of the top 10 rock bands
select * from album;
select * from artist;
select * from track;

select ar.artist_id, ar.name, count(ar.artist_id) as Number_of_songs
from artist ar join album al on ar.artist_id=al.artist_id
join track t on al.album_id = t.album_id
where t.genre_id in 
(
	select t.genre_id from track t join genre g
	on t.genre_id = g.genre_id
	where g.name like 'Rock'
)
group by ar.artist_id
order by number_of_songs desc
limit 10;

 
 
--3. Return all the track names that have a song length longer than the average song length. 
--Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first

select track_id, name, milliseconds from track 
where milliseconds >
(
	select avg(milliseconds) as avg_len from track 
) 
order by milliseconds desc; 


										--Question Set 3 – Advance
--1. Find how much amount spent by each customer on artists? 
--Write a query to return customer name, artist name and total spent

select c.first_name,c.last_name, ar.name,sum(i.total) as Total_spent
from customer c join invoice i on c.customer_id= i.customer_id
join invoice_line il on i.invoice_id=il.invoice_id
join track t on il.track_id = t.track_id
join album al on t.album_id=al.album_id
join artist ar on al.artist_id=ar.artist_id

group by c.first_name,c.last_name,ar.name
order by i.total desc;

WITH best_selling_artist AS (
	SELECT artist.artist_id AS artist_id, artist.name AS artist_name,
	SUM (invoice_line.unit_price * invoice_line.quantity) AS total_sales
	FROM invoice_line
	JOIN track ON track.track_id = invoice_line.track_id
	JOIN album ON album.album_id =track.album_id
	JOIN artist ON artist.artist_id = album.artist_id
	GROUP BY 1
	ORDER BY 3 DESC
	LIMIT 1
)

SELECT c.customer_id,c.first_name, c.last_name,bsa.artist_name,
sum(il.unit_price*il.quantity) AS amount_spent
FROM invoice i
JOIN customer c ON c.customer_id = i.customer_id
JOIN invoice_line il on il.invoice_id = i.invoice_id
JOIN track t ON t.track_id =il.track_id
JOIN album alb ON alb.album_id = t.album_id
JOIN best_selling_artist bsa ON bsa.artist_id = alb.artist_id
GROUP BY 1,2,3,4
ORDER BY 5 DESC;


--2. We want to find out the most popular music Genre for each country. 
--We determine the most popular genre as the genre with the highest amount of purchases. 
--Write a query that returns each country along with the top Genre. 
--For countries where the maximum number of purchases is shared return all Genres

WITH popular_genre AS
(
SELECT COUNT (*) AS purchases, customer.country, genre.name, genre.genre_id,
row_number () OVER(PARTITION BY customer.country ORDER BY COUNT(invoice_line.quantity) DESC) AS RowNo
FROM invoice_line
JOIN invoice ON invoice.invoice_id=invoice_line.invoice_id
JOIN customer ON customer.customer_id = invoice.customer_id
JOIN track ON track.track_id = invoice_line.track_id
JOIN genre ON genre.genre_id =track.genre_id
GROUP BY 2, 3 , 4
ORDER BY 2 ASC, 1 DESC
)

SELECT * FROM popular_genre p where RowNo<= 1 order by p.purchases desc;

--3. Write a query that determines the customer that has spent the most on music for each country. 
--Write a query that returns the country along with the top customer and how much they spent. 
--For countries where the top amount spent is shared, provide all customers who spent this amount

WITH Customter_with_country AS
(
SELECT customer.customer_id,first_name,last_name,billing_country, SUM(total) AS total_spending,
row_number() OVER(PARTITION BY billing_country ORDER BY SUM(total) DESC) AS RowNo
FROM invoice
JOIN customer ON customer.customer_id = invoice.customer_id
GROUP BY 1,2,3,4
ORDER BY 4 ASC,5 DESC
)

SELECT * FROM Customter_with_country WHERE RowNo<= 1 order by total_spending desc; 
 
